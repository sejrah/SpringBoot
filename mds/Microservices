To Do:
HTTP Resource API
JSON
Netflix - Eureka, Zuul, Ribbon, and Hystrix
Java 8 - Lamba, new features
Use open source as much as possible (esp. Apache)

Definition:
The term "Microservice Architecture" describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data.

Microservice Architectural Style – is an approach to developing a single application as a suite of small services each running in its own process and communicating with lightweight mechanisms (often HTTP resource API)

Talking points:
•	Particular way of designing application
•	Around business capability (Rather than infrastructure/technology – UI, Server, and DBA)
•	Independently deployable
•	Automated deployable
•	Running in its’s own process
•	Communicating with lightweight protocol (often HTTP resource API)
•	Decentralized control of languages and data
•	Issues with monolith application
•	Small change requires entire monolith to be rebuilt and deployed
•	Hard to keep up with modular structure over time
•	Scaling requires entire application scaling
•	Spring Boot: build Java-based, REST oriented microservices quickly; then package and deploy it without need for external application container
		Simplifies core task - Building REST-based microservice (HTTP-style verbs to URLs; JSON); maps Java exceptions to HTTP error codes
•	Spring Cloud: wraps popular cloud management microservice frameworks

Characteristics:
Componentization via Services
	Component is unit of software that is independently replaceable and upgradable.
	Libraries vs. Services
	A service may consist of multiple processes that will always be developed and deployed together, such as an application process and a database that's only used by that service.
Organized around Business Capabilities
	Orders, Shipping, Recommendations
	Two Pizza team size
	Direct communication with Customer and End Users
Products not Projects
Smart endpoints and dumb pipes
	Not smart infrastructure like ESB
	Communication via REST or MQ
Decentralized Governance
Decentralized Data Management
	One database per Service
	Data sharing through Service that wraps data
Infrastructure Automation
	Continuous Delivery
	Blue/Green deployment
Design for failure
Evolutionary Design

Patterns:
Core Microservice Development Patterns
	(Spring Boot)Service Granularity: too coarse-grained => overlap into different business problems -> difficult to maintain; too fine-grained -> increases complexity; turn app into “dumb” data abstraction layer
	(Spring Boot)Communication Protocols: JSON
	(Spring Boot)Interface Desgin
	(Spring Cloud Config - Git, Netflix Eureka, Consul)Configuration Management
	(Spring Cloud Stream - RabbitMQ, Kafka)Event Processing
Microservice Routing Patterns
	(Spring Cloud/Netflix Zuul)Service Routing: single logic URL; acts as policy enforcement point like authorization, authentication and content checking
	(Spring Cloud/Netflix Eureka/Consul)Service Discovery: abstracts physical location
Microservice Client Resiliency Patterns
	(Spring Cloud/Netflix Ribbon)Client-side load balancing: 
	(Spring Cloud/Netflix Hystrix)Circuit Breakers Pattern (not repeatedly call back; instead fail-fast)
	(Spring Cloud/Netflix Hystrix)Fallback Pattern
	(Spring Cloud/Netflix Hystrix)Bulkhead Pattern (one misbehaving service does not take up all resources)
Microservice Build/Deployment Patterns
	(Travis CI)Build and Deployment Pipeline
	(Docker)Infrastructure as Code
	(Docker)Immutable Servers
	(Travis CI/Docker)Phoenix Servers

12-Factor Applications:
	Application/App - Single deployable unit
	Distributed system - multiple collaborating deployable-s (applications)
	1. Code base: Each deployable app is tracked as one code base tracked in revision control.
	2. Dependencies: An app explicitly declares and isolates dependencies via appropriate tooling (e.g. Maven) rather than depending on implicitley realized dependencies in its deployment environment.
	3. Config: Configuration or anything that is likely to differ between deployment environment (e.g. development, staging, production) is injected via operating system-level environment variables.
	4.  Backing services: such as database or message brokers, are treated as attached resources and consumed identically across all environments.
	5. Build, release, run: The stages of building a deployable app artifact, combining artifact with configuration, and starting one or more processes from that artifact/configuration combination, are strictly separated.
	6. Processes: The app executes as one or more stateless processes (e.g. master/workers) that share nothing. Any necessary state is externalized to backing services (cache, object store, etc.)
	7. Port binding: The app is self-contained and exports any/all services via port binding (including HTTP).
	8. Concurrency: Concurrency is usually accomplished by scaling out app processes horizontally.
	9. Disposabilitiy: Robustness is maximized via processes that start up quickly and shut down gracefully.
	10. Dev/prod parity: Continuous delivery and deployment are enabled by keeping development, staging and production environemtns as similar as possible.
	11. Logs: Rather than managing logfiles, treat logs as event streams, allowing the execution environment to collect, aggregate, index, and analyze the events via centralized services.
	12. Admin processes: Administrative or management tasks, such as database migrations, are executed as one-off processes in environemtns identical to the app's long-running processes.

